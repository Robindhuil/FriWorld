{
    "entries": [
        {
            "category": "Učitelia",
            "name": "doc. Ing. Ján Janech, PhD.",
            "description": "Docent na Fakulte riadenia a informatiky Žilinskej univerzity s viac ako 14-ročnou pedagogickou praxou. Špecialista na softvérové inžinierstvo a distribuované databázové systémy s dôrazom na praktické aplikácie v dopravných systémoch.\n\nVýučba: Informatika 1-2, Softvérové modelovanie, Metaprogramovanie, Softvérové inžinierstvo, Pokročilé objektové technológie\n\nVýskum: VANET siete, replikácia dát v dynamických systémoch, optimalizácia dopravných dát, modelovanie softvérových systémov\n\nKľúčové projekty: AdHocSim.FRI (simulácia dopravných sietí), UML.FRI (nástroj na modelovanie softvéru)\n\nCertifikáty: Microsoft Office Specialist, .NET Fundamentals\n\nČlenstvo: IEEE, ACM",
            "photo": "jan_janech",
            "video": ""
        },
        {
            "category": "Učitelia",
            "name": "Ing. Michal Ďuračík, PhD.",
            "description": "Ing. Michal Ďuračík, PhD. je odborný asistent na Fakulte riadenia a informatiky Žilinskej univerzity. Špecializuje sa na tieto oblasti:\n\n- Výučba: Informatika 1-2, Pokročilé objektové technológie, Vývoj webových aplikácií, Programovanie v C#\n- Výskum: Analýza zdrojového kódu, Detekcia plagiátov, Textová analýza, Aplikácie umelej inteligencie\n\nVo svojej práci kladie dôraz na prepojenie teórie s praxou, pričom študenti pracujú na reálnych projektch v spolupráci s IT firmami. Je aktívny vo výskume a publikuje v oblasti softvérového inžinierstva.",
            "photo": "michal_duracik",
            "video": ""
        },
        {
            "category": "Učitelia",
            "name": "doc. Ing. Marek Kvet, PhD.",
            "description": "doc. Ing. Marek Kvet, PhD. je odborný asistent/docent na Fakulte riadenia a informatiky Žilinskej univerzity so špecializáciou na algoritmizáciu a optimalizáciu komplexných systémov. Vo svojej výučbe sa zameriava na základné programovanie (Informatika 1), pokročilé algoritmické techniky a vedenie projektovej výučby, kde študenti aplikujú teoretické poznatky na rozsiahlych praktických úlohách. Jeho výskum zahŕňa inteligentné dopravné systémy, optimalizáciu verejnej dopravy a riešenie náročných lokačných problémov pomocou metaheuristík. Aktívne spolupracuje s dopravnými podnikmi a mestskými samosprávami na implementácii svojich výskumných výsledkov do praxe. Je autorom viacerých publikácií v domácich i medzinárodných vedeckých časopisoch a pravidelným účastníkom medzinárodných konferencií zameraných na optimalizáciu a umelú inteligenciu.",
            "photo": "marek_kvet",
            "video": ""
        },
        {
            "category": "Učitelia",
            "name": "Ing. Matej Meško, PhD.",
            "description": "Ing. Matej Meško, PhD. je odborný asistent na Fakulte riadenia a informatiky Žilinskej univerzity so špecializáciou na moderné webové a mobilné technológie. Svojou kariérou spája akademickú sféru s praktickým vývojom v IT sektore.\n\nVýučba:\n- Vývoj aplikácií pre internet a intranet\n- Tvorba mobilných aplikácií\n- Moderné webové technológie a frameworky\n\nVýskum:\n- Pokročilé technológie tvorby internetových aplikácií\n- Vývoj aplikácií pre mobilné platformy\n- Inteligentné dopravné systémy\n- Spracovanie a analýza obrazu\n\nKombináciou technických a umeleckých zručností mu umožňuje prinášať do výučby aj kreatívny a dizajnérsky pohľad na IT riešenia.\n\nVo svojom výskume sa zameriava na algoritmy pre 3D rekonštrukciu obrazu a inteligentné spracovanie vizuálnych dát, pričom výsledky svojho výskumu aplikuje aj v pedagogickej činnosti. Je autorom viacerých odborných publikácií a výukových materiálov, vrátane zbierky úloh pre vývoj webových aplikácií.",
            "photo": "matej_mesko",
            "video": ""
        },
        {
            "category": "Učitelia",
            "name": "Ing. Dominika Petríková, PhD.",
            "description": "Ing. Dominika Petríková, PhD. je odborná asistentka na Fakulte riadenia a informatiky Žilinskej univerzity.\n\nŠpecializuje sa na výučbu základov programovania v predmetoch Informatika 1 a 2, s dôrazom na prepojenie teórie s praxou.\n\nJej výskumné zameranie:\n- Aplikácia hlbokého učenia v biomedicíne\n- Konvolučné neurónové siete pre histopatológiu\n- Automatizácia analýzy mikroskopických snímok\n\nAktívne sa podieľa na medzinárodných výskumných projektoch v oblasti medicínskej informatiky a publikuje vo vedeckých časopisoch.",
            "photo": "dominika_petrikova",
            "video": ""
        },
        {
            "category": "Učitelia",
            "name": "Ing. Štefan Toth, PhD.",
            "description": "Ing. Štefan Toth, PhD. je odborný asistent na Fakulte riadenia a informatiky Žilinskej univerzity s bohatými skúsenosťami v priemyselných IT projektoch.\n\nŠpecializuje sa na výučbu objektovo orientovaného programovania a moderných vývojových technológií v prostredí .NET.\n\nVo svojom výskume sa zameriava na:\n- inteligentné dopravné systémy\n- technológie VANET (Vozidlové ad-hoc siete)\n- spracovanie obrazu a jazyka (NLP)\n- internet vecí (IoT)\n\nJeho práce kombinuje teoretické poznatky s praktickými aplikáciami v spolupráci s priemyselnými partnermi.\n\nOkrem pedagogickej činnosti aktívne publikuje v medzinárodných časopisoch a podieľa sa na výskumných projektoch s dopravnou tematikou.",
            "photo": "stefan_toth",
            "video": ""
        },
        {
            "category": "Učitelia",
            "name": "Ing. Petra Gregorová, PhD.",
            "description": "TÁTO POSTAVA JE FIKTÍVNA A BOLA VYTVORENÁ VÝHRADNE PRE POTREBY BAKALÁRSKEJ PRÁCE.\n\nOdborná asistentka na Fakulte riadenia a informatiky ŽU so špecializáciou na:\n\n• Databázové a bezpečnostné systémy\n• Prepojenie IT a obchodných procesov\n• Aplikácie AI v expertných systémoch\n\nAktívne sa venuje:\n- Výučbe informatiky pre manažérov aj technikov\n- Výskumu s praktickými aplikáciami v priemysle\n- Publikačnej činnosti v domácich i medzinárodných časopisoch",
            "photo": "petra_gregorova",
            "video": ""
        },
        {
            "category": "Programovanie",
            "name": "For Loop",
            "description": "## Čo je to for cyklus?\n\nFor cyklus je riadiaca štruktúra, ktorá umožňuje opakované vykonávanie bloku kódu špecifický počet krát. Skladá sa z troch hlavných častí:\n\n1. **Inicializácia** - nastavenie počiatočnej hodnoty\n2. **Podmienka** - kontrola pokračovania cyklu\n3. **Iterácia** - zmena hodnoty po každom prechode\n\n## Syntax for cyklu v Jave\n```java\nfor (inicializácia; podmienka; iterácia) {\n    // blok kódu, ktorý sa opakuje\n}\n```\n\n## Príklad použitia\n```java\n// Vypíše čísla 1 až 5\nfor (int i = 1; i <= 5; i++) {\n    System.out.println(i);\n}\n```\n\n## Aplikácia na tvoj quest\n\nV tvojej úlohe potrebuješ:\n1. Nastaviť počiatočnú hodnotu `i = 1`\n2. Nastaviť podmienku `i <= pocetStudentov`\n3. Zvyšovať hodnotu `i++` po každej iterácii\n4. Vypisovať správu pre každého študenta\n\n## Časté chyby\n1. Zabudnutá bodkočiarka medzi časťami cyklu\n2. Nesprávna podmienka (nekonečný cyklus)\n3. Zlé počítadlo (začínať od 0 namiesto 1)\n\n## Tipy pre tvoj kód\n- Skontroluj, či cyklus začína od 1\n- Uisti sa, že podmienka používa premennú `pocetStudentov`\n- Zabezpeč správne zvýšenie počítadla (`i++`)",
            "photo": "play",
            "video": "videos/for_loop.mp4"
        },
        {
            "category": "Programovanie",
            "name": "Programovacie prostredie",
            "description": " • 1.Tlačidlo na spustenie kódu\n • 2.Tlačidlo na minimalizovanie okna(uloží sa dopísaný kód)\n • 3.Tlačidlo na zavretie okna(resetuje sa kód)\n • 4.Priestor na písanie kódu",
            "photo": "ide",
            "video": ""
        },
        {
            "category": "Programovanie",
            "name": "Premenné",
            "description": "Premenné sú základné stavebné kamene každého programu. Sú to pomenované miesta v pamäti, ktoré uchovávajú údaje. Každá premenná má svoj typ, názov a hodnotu.\n\nZákladné typy premenných:\n• int - celé čísla (napr. int vek = 20;)\n• double - desatinné čísla (napr. double cena = 10.99;)\n• String - textové reťazce (napr. String meno = \"Peter\";)\n• boolean - logická hodnota true/false (napr. boolean jeZapnute = true;)\n• char - jeden znak (napr. char trieda = 'A';)\n\nPremenné sa musia najprv deklarovať (vytvoriť) pred ich použitím. Názvy premenných by mali byť výstižné a dodržiavať konvencie (napr. camelCase).",
            "photo": "play",
            "video": "videos/variables.mp4"
        },
        {
            "category": "Programovanie",
            "name": "While Loop",
            "description": "## Čo je to while cyklus?\n\nWhile cyklus opakuje blok kódu, kým je podmienka splnená (true). V tvojom prípade ide o nekonečný cyklus s podmieneným ukončením.\n\n## Analýza tvojho kódu\n```java\n___ zastav = false;\nwhile (true) {\n    System.out.println(\"Terminál: Kód je zaseknutý!\");\n    if (___ == true) {\n        break;\n    }\n    ___ = true;\n}\n```\n\n## Čo treba doplniť\n1. `___ zastav = false;` - typ premennej (boolean)\n2. `if (___ == true)` - názov premennej (zastav)\n3. `___ = true;` - názov premennej (zastav)\n\n## Správne riešenie\n```java\nboolean zastav = false;\nwhile (true) {\n    System.out.println(\"Terminál: Kód je zaseknutý!\");\n    if (zastav == true) {\n        break;\n    }\n    zastav = true;\n}\n```\n\n## Ako to funguje\n1. Cyklus sa neustále opakuje (while true)\n2. V každej iterácii vypíše správu\n3. Ak je `zastav` true, cyklus sa ukončí (break)\n4. Po prvom prechode nastaví `zastav` na true\n\n## Časté chyby\n1. Zabudnúť na typ premennej (boolean)\n2. Nesprávny názov premennej v podmienke\n3. Zabudnúť na break príkaz\n4. Nesprávne poradie príkazov v cykle\n\n## Vylepšenia\n- Namiesto `== true` stačí `if (zastav)`\n- Môžeme použiť priamo `while (!zastav)`\n- Odporúča sa použiť výstižnejší názov premennej (napr. `ukoncit`)",
            "photo": "play",
            "video": "videos/while.mp4"
        },
        {
            "category": "Programovanie",
            "name": "Podmienka if",
            "description": "## Čo je to podmienka if?\n\nPodmienka if je základná riadiaca štruktúra, ktorá umožňuje vykonávať rôzne časti kódu na základe splnenia alebo nesplnenia určitých podmienok.\n\n## Syntax v Jave\n```java\nif (podmienka) {\n    // kód, ktorý sa vykoná ak je podmienka pravdivá\n}\n```\n\n## Typy podmienok\n1. **Základná if podmienka**\n```java\nif (vek >= 18) {\n    System.out.println(\"Ste dospelý\");\n}\n```\n\n2. **If-else**\n```java\nif (teplota > 30) {\n    System.out.println(\"Je horúco\");\n} else {\n    System.out.println(\"Nie je horúco\");\n}\n```\n\n3. **If-else if-else**\n```java\nif (skore >= 90) {\n    System.out.println(\"Výborné\");\n} else if (skore >= 70) {\n    System.out.println(\"Dobré\");\n} else {\n    System.out.println(\"Potrebuješ zlepšiť\");\n}\n```\n\n## Logické operátory\n- `>` väčší ako\n- `<` menší ako\n- `>=` väčší alebo rovný\n- `<=` menší alebo rovný\n- `==` rovná sa\n- `!=` nerovná sa\n\n## Aplikácia na tvoj úlohu\nV tvojej úlohe s monitorami a stoličkami potrebuješ:\n1. Porovnať počet monitorov a stoličiek\n2. Vytvoriť tri vetvenia:\n   - Ak je monitorov viac\n   - Ak je stoličiek viac\n   - Ak je počet rovnaký\n3. Vypísať správnu správu pre každý prípad\n\n## Časté chyby\n1. Zabudnuté zátvorky `{}` pre bloky kódu\n2. Použitie `=` namiesto `==` v podmienke\n3. Nesprávne porovnanie hodnôt\n4. Chýbajúce medzery okolo operátorov (čitateľnosť)\n\n## Tipy\n- Vždy dávaj medzery okolo logických operátorov\n- Pre komplexné podmienky používaj zátvorky\n- Komentuj podmienky, ak nie sú zrejmé\n- Testuj všetky možné scenáre (viac, menej, rovnaké)",
            "photo": "play",
            "video": "videos/if.mp4"
        },
        {
            "category": "Programovanie",
            "name": "Programovací jazyk",
            "description": "Programovací jazyk je formálny systém, ktorý umožňuje človeku komunikovať s počítačom a písať inštrukcie, ktoré počítač dokáže vykonať. Skladá sa zo syntaxe (pravidlá zápisu) a sémantiky (význam).\n\nZákladné delenie:\n• Vysokourovňové jazyky (Python, Java, C#) - ľahšie na čítanie a písanie\n• Nízkoúrovňové jazyky (Assembler) - bližšie k hardvéru\n\nPopulárne jazyky a ich využitie:\n• Python = dátová analýza, AI, automatizácia\n• JavaScript = webové aplikácie a frontend\n• Java = enterprise aplikácie, Android\n• C# = herný vývoj (Unity), Windows aplikácie\n• C++ = systémové programovanie, hry\n• PHP = webový backend\n• SQL = práce s databázami\n\nKaždý jazyk má svoje silné stránky a je vhodný pre iné typy projektov. Začiatočníci často začínajú s Pythonom pre jeho jednoduchú syntax.",
            "photo": "play",
            "video": "videos/programming.mp4"
        },
        {
            "category": "Programovanie",
            "name": "Pole",
            "description": "## Čo je to pole?\n\nPole je štruktúra, ktorá ukladá viac hodnôt rovnakého typu pod jedným názvom. Každá hodnota má svoj index (číslo od 0).\n\n## Ako vytvoriť pole v Jave\n\n```java\n// Deklarácia a inicializácia poľa\nString[] priezviska = {\"Novák\", \"Kováč\", \"Varga\"};\n\n// Prístup k prvkom\nSystem.out.println(priezviska[0]); // Vypíše: Novák\n\n// Dĺžka poľa\nSystem.out.println(priezviska.length); // Vypíše: 3\n```\n\n## Prechádzanie poľa\n\nPole môžeme prechádzať pomocou for cyklu:\n\n```java\nfor (int i = 0; i < priezviska.length; i++) {\n    System.out.println(priezviska[i]);\n}\n```\n\n## Aplikácia na tvoju úlohu\n\nV tvojom prípade potrebuješ:\n1. Vytvoriť pole so všetkými priezviskami učiteľov\n2. Správne použiť indexy (začínajú od 0)\n3. Prejsť celé pole pomocou for cyklu\n4. Vypísať každé priezvisko\n\n## Časté chyby\n1. Zmiešavanie indexov (prvý prvok má index 0, nie 1)\n2. Prekročenie dĺžky poľa (index nesmie byť >= length)\n3. Zabudnuté zátvorky {} pri inicializácii poľa\n4. Nesprávny typ poľa\n\n## Tipy\n- Vždy skontroluj dĺžku poľa pred prístupom k prvkom\n- Používaj for cyklus s premennou i pre prechádzanie\n- Komentuj, ak pracuješ s komplexnými poliami",
            "photo": "array_visualization.png",
            "video": "videos/java_arrays.mp4"
        },
        {
            "category": "Programovanie",
            "name": "Trieda",
            "description": "## Čo je to trieda?\n\nTrieda je základný stavebný blok objektovo orientovaného programovania. Predstavuje šablónu alebo návrh, podľa ktorého vytvárame objekty (inštancie).\n\n## Štruktúra triedy\n\nKaždá trieda obsahuje:\n1. **Premenné** (atribúty) - popisujú stav objektu\n2. **Metódy** - definujú správanie objektu\n3. **Konštruktor** - špeciálna metóda na inicializáciu objektu\n\n## Príklad triedy\n```java\npublic class Miestnost {\n    // Premenné (atribúty)\n    private int pocetStolick;\n    private String nazov;\n    \n    // Konštruktor\n    public Miestnost(int pocetStolick, String nazov) {\n        this.pocetStolick = pocetStolick;\n        this.nazov = nazov;\n    }\n}\n```\n\n## Čo je to inštancia?\nInštancia je konkrétny objekt vytvorený podľa triedy. Každá inštancia má vlastnú kópiu premenných triedy.\n\n## Ako vytvoriť inštanciu?\nInštanciu vytvoríme pomocou kľúčového slova `new`:\n```java\nMiestnost mojaMiestnost = new Miestnost(15, \"RA012\");\n```\n\n## Konštruktor\n- Špeciálna metóda, ktorá sa volá pri vytváraní inštancie\n- Má rovnaký názov ako trieda\n- Slúži na inicializáciu premenných objektu\n\n## Kľúčové slovo 'this'\n- Odkazuje sa na aktuálnu inštanciu triedy\n- Používa sa na rozlíšenie medzi premennými triedy a parametrami\n",
            "photo": "",
            "video": ""
        },
        {
            "category": "Programovanie",
            "name": "Funkcie",
            "description": "## Čo sú to funkcie/metódy?\n\nFunkcie (v OOP nazývané metódy) sú bloky kódu, ktoré:\n- Vykonávajú špecifickú úlohu\n- Môžu prijímať vstupy (parametre)\n- Môžu vracať výstup (návratovú hodnotu)\n- Zvyšujú prehľadnosť a znovupoužiteľnosť kódu\n\n## Štruktúra metódy v Jave\n```java\nmodifikátor návratovýTyp názovMetódy(parameter1, parameter2) {\n    // Telo metódy\n    return hodnota; // Ak nie je void\n}\n```\n\n## Príklady metód\n\n1. **Metóda bez parametrov a návratovej hodnoty**\n```java\npublic void pozdrav() {\n    System.out.println(\"Ahoj!\");\n}\n```\n\n2. **Metóda s parametrami**\n```java\npublic void vypisSucet(int a, int b) {\n    System.out.println(\"Súčet: \" + (a + b));\n}\n```\n\n3. **Metóda s návratovou hodnotou**\n```java\npublic int vypocitajSucet(int a, int b) {\n    return a + b;\n}\n```\n\n## Špeciálny typ metódy - konštruktor\n\n- Má rovnaký názov ako trieda\n- Nepoužíva návratový typ (ani void)\n- Volá sa automaticky pri vytváraní objektu\n\n```java\npublic class Dvere {\n    public Dvere() { // Konštruktor\n        // Inicializačný kód\n    }\n}\n```\n\n## Ako volať metódy?\n\n1. **Volanie metódy v rámci tej istej triedy**\n```java\nnazovMetody(argumenty);\n```\n\n2. **Volanie metódy na objekte**\n```java\nobjekt.nazovMetody(argumenty);\n```\n\n3. **Volanie statickej metódy**\n```java\nTrieda.nazovMetody(argumenty);\n```\n\n## Kľúčové slovo 'void'\n\n- Označuje, že metóda nevracia žiadnu hodnotu\n- Ak metóda vracia hodnotu, musí použiť príkaz return\n\n## Modifikátory prístupu\n\n- `public` - prístupná odkiaľkoľvek\n- `private` - prístupná len v rámci triedy\n- `protected` - prístupná v rámci balíka a podtried\n\n## Aplikácia na tvoj quest\n\nV tvojom riešení potrebuješ:\n1. Správne definovať metódu `odomkni()`\n2. Implementovať metódu `suZamknute()`\n3. V konštruktore volať metódu `odomkni()`\n4. V main() metóde volať metódy na objekte",
            "photo": "",
            "video": ""
        },
        {
            "category": "Secrets",
            "name": "Ján Janech",
            "description": "Figurka pána Janecha, ktorá ťa chráni pred bugmi a nullpointermi.",
            "photo": "secrets/jan_janech",
            "video": ""
        },
        {
            "category": "Secrets",
            "name": "Michal Ďuračík",
            "description": "Figurka pána Ďuračíka, ktorá ti pomôže s ked ti spadne webová aplikácia.",
            "photo": "secrets/michal_duracik",
            "video": ""
        },
        {
            "category": "Secrets",
            "name": "Matej Meško",
            "description": "Figurka pána Meška, ktorá ti ťa bude sprevádzať programaovaním hier ako je táto <3.",
            "photo": "secrets/matej_mesko",
            "video": ""
        },
        {
            "category": "Secrets",
            "name": "Marek Kvet",
            "description": "Figurka pána Kveta, ktorá ti bude pripomínať že potrebuješ optimalizovať svoj kód.",
            "photo": "secrets/marek_kvet",
            "video": ""
        },
        {
            "category": "Secrets",
            "name": "Štefan Tóth",
            "description": "Figurka pána Tótha, ak by si potreboval skvelý pokec.",
            "photo": "secrets/stefan_toth",
            "video": ""
        },
        {
            "category": "Secrets",
            "name": "Dominika Petríková",
            "description": "Figurka pani Petríkovej, ktorá ti bude psychickou oporou aj keď máš neustále errory v kóde",
            "photo": "secrets/dominika_petrikova",
            "video": ""
        },
        {
            "category": "Secrets",
            "name": "Petra Gregorová",
            "description": "Figurka pani Gregorovej, ktorá ti má pripomenúť že informatika je aj o biznise.",
            "photo": "secrets/petra_gregorova",
            "video": ""
        },
        {
            "category": "Secrets",
            "name": "Káva",
            "description": "Káva... Budeš ju potrebovať...",
            "photo": "secrets/kava",
            "video": ""
        },
        {
            "category": "Secrets",
            "name": "Black Snake",
            "description": "Nič okolo teba by nebolo bez tejto LEGENDY.",
            "photo": "secrets/black_snake",
            "video": ""
        },
        {
            "category": "Secrets",
            "name": "Hnedý phantom",
            "description": "Budeš rád ak tento secret nepochopíš.",
            "photo": "secrets/phantom",
            "video": ""
        },
        {
            "category": "Secrets",
            "name": "Pí",
            "description": "3.141592653589793238462643383279502884197169399375105820974944592307816406286208998628034825342117067982148086513282306647093844609550582231725359408128481117450284102701938521105559644622948954930381964428810975665933446128475648233786783165271201909145648566923460348610454326648213393607260249141273724587006606315588174881520920962829254091715364367892590360011330530548820466521384146951941511609433057270365759591953092186117381932611793105118548074462379962749567351885752724891227938183011949129833673362440656643086021394946395224737190702179860943702770539217176293176752384674818467669405132000568127145263560827785771342757789609173637178721468440901224953430146549585371050792279689258923542019956112129021960864034418159813629774771309960518707211349999998372978049951059731732816096318595024459455346908302642522308253344685035261931188171010003137838752886587533208381420617177669147303598253490428755468731159562863882353787593751957781857780532171226806613001927876611195909216420198938095257201065485863278865936153381827968230301952035301852968995773622599413891249721775283479131515574857242454150695950829533116861727855889075098381754637464939319255060400927701671139009848824012858361603563707660104710181942955596198946767837449448255379774726847104047534646208046684259069491293313677028989152104752162056966024058038150193511253382430035587640247496473263914199272604269922796782354781636009341721641219924586315030286182974555706749838505494588586926995690927210797509302955321165344987202755960236480665499119881834797753566369807426542527862551818417574672890977772793800081647060016145249192173217214772350141441973568548161361157352552133475741849468438523323907394143334547762416862518983569485562099219222184272550254256887671790494601653466804988627232791786085784383827967976681454100953883786360950680064225125205117392984896084128488626945604241965285022210661186306744278622039194945047123713786960956364371917287467764657573962413890865832645995813390478027590099465764078951269468398352595709825822620522489407726719478268482601476990902640136394437455305068203496252451749399651431429809190659250937221696461515709858387410597885959772975498930161753928468138268683868942774155991855925245953959431049972524680845987273644695848653836736222626099124608051243884390451244136549762780797715691435997700129616089441694868555848406353422072225828488648158456028506016842739452267467678895252138522549954666727823986456596116354886230577456498035593634568174324112515076069479451096596094025228879710893145669136867228748940560101503308617928680920874760917824938589009714909675985261365549781893129784821682998948722658804857564014270477555132379641451523746234364542858444795265867821051141354735739523113427166102135969536231442952484937187110145765403590279934403742007310578539062198387447808478489683321445713868751943506430218453191048481005370614680674919278191197939952061419663428754440643745123718192179998391015919561814675142691239748940907186494231961567945208095146550225231603881930142093762137855956638937787083039069792077346722182562599661501421503068038447734549202605414665925201497442850732518666002132434088190710486331734649651453905796268561005508106658796998163574736384052571459102897064140110971206280439039759515677157700420337869936007230558763176359421873125147120532928191826186125867321579198414848829164470609575270695722091756711672291098169091528017350671274858322287183520935396572512108357915136988209144421006751033467110314126711136990865851639831501970165151168517143765761835155650884909989859982387345528331635507647918535893226185489632132933089857064204675259070915481416549859461637180270981994309924488957571282890592323326097299712084433573265489382391193259746366730583604142813883032038249037589852437441702913276561809377344403070746921120191302033038019762110110044929321516084244485963766983895228684783123552658213144957685726243344189303968642624341077322697802807318915441101044682325271620105265227211166039666557309254711055785376346682065310989652691862056476931257058635662018558100729360659876486117910453348850346113657686753249441668039626579787718556084552965412665408530614344431858676975145661406800700237877659134401712749470420562230538994561314071127000407854733269939081454664645880797270826683063432858785698305235808933065757406795457163775254202114955761581400250126228594130216471550979259230990796547376125517656751357517829666454779174501129961489030463994713296210734043751895735961458901938971311179042978285647503203198691514028708085990480109412147221317947647772622414254854540332157185306142288137... proste budeš tento symbol vidieť časo.",
            "photo": "secrets/pi",
            "video": ""
        },
        {
            "category": "Secrets",
            "name": "Kanálom fuj",
            "description": "Ísť kanálom? Fuj.",
            "photo": "secrets/kanal",
            "video": ""
        }
    ]
}